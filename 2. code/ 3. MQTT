pip install paho-mqtt

import paho.mqtt.client as mqtt
import random
import time
import requests


#first of all convert mm evapo from Penman to time we need to water-------- 
mm_evapo=penm

mm_evapo=penm #the normal range for mm_evapo suposse to be 2-6 mm

x=100 #notice! 1 mm in penman equal to 1 m^3 for Dunam and 100ml for one plant
evapo_daily=mm_evapo*x #for one plant
print('the evapo daily is:', evapo_daily)
pipe_suply=1.67 #assume using pipe which suplly 6 L per hour--->6000mL per hour--->1.67 mL per second
time_on=evapo_daily*pipe_suply # time in second

print(time_on)

# MQTT broker details
broker_address = "broker.hivemq.com"
broker_port = 1883

# Create a MQTT client instance
client = mqtt.Client()

# Connect to the MQTT broker
client.connect(broker_address, broker_port, 60)

for i in range(0,3):
  # Publish 'on' to indicate the code has started
  client.publish("agrotech/2023/control", "open")
  print("Published status: on")
  time.sleep(3)
# Wait for the defined time delay
time.sleep(time_on)

for i in range(0,3):

  # Publish 'off' after the time delay
  client.publish("agrotech/2023/control", "close")
  print("Published status: off")
  time.sleep(3)

# Disconnect from the MQTT broker (not reached in this example)
client.disconnect()

#sending the water nedded to thungspeak:

# ThingSpeak parameters
api_key = '1NNGNWS1BM7D16KZ'  # Replace with your ThingSpeak API key
channel_id = '2187009'  # Replace with your ThingSpeak channel ID

# Create the URL for the ThingSpeak update API
url = f'https://api.thingspeak.com/update?api_key={api_key}&field2={evapo_daily}' #replace your chanle here

# Send the POST request to ThingSpeak
response = requests.post(url)

# Check the response status
if response.status_code == 200:
    print('Data sent to ThingSpeak successfully.')
else:
    print('Failed to send data to ThingSpeak.')
