#include <WiFi.h>
#include <PubSubClient.h>

#define MOISTURE_SENSOR_PIN A3  // Connect the blue wire to this GPIO pin on ESP32.
#define SENSOR_MAX 4095
#define CUSTOM_RANGE_MIN 0
#define CUSTOM_RANGE_MAX 2000

WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);

const char* ssid = "Ron Tzur (2)";
const char* password = "ron1251993";
const int relayPin = D5;  // GPIO 13 connected to the relay module's control pin

char* mqttServer = "broker.hivemq.com";
int mqttPort = 1883;

const int valve_pin = D5;  // GPIO pin connected to the valve
String msgString;    // Declare msgString variable in the global scope

void setupMQTT() {
  mqttClient.setServer(mqttServer, mqttPort);
  mqttClient.setCallback(callback);
}

void reconnect() {
  Serial.println("Connecting to MQTT Broker...");
  while (!mqttClient.connected()) {
    Serial.println("Reconnecting to MQTT Broker...");
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);

    if (mqttClient.connect(clientId.c_str())) {
      Serial.println("Connected.");
      mqttClient.subscribe("agrotech/2023/control");
    }
  }
}

void setup(){
{
  Serial.begin(115200);
  pinMode(relayPin, OUTPUT);
  pinMode(MOISTURE_SENSOR_PIN, INPUT);
}

{
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("Connected to Wi-Fi");

  setupMQTT();

  pinMode(valve_pin, OUTPUT);
  digitalWrite(valve_pin, HIGH);
}
}
void loop() {

 if (!mqttClient.connected()) {
    reconnect();
  }

  mqttClient.loop();


  int moisture = analogRead(MOISTURE_SENSOR_PIN);
  float percentage = map(moisture, 0, SENSOR_MAX, CUSTOM_RANGE_MIN, CUSTOM_RANGE_MAX);
  percentage = map(percentage, CUSTOM_RANGE_MIN, CUSTOM_RANGE_MAX, 0, 100); // Map the range to 0-100%
  percentage = map(percentage, 0, 46, 0, 100); // Adjust the range to make 46% the new 100%

  Serial.print("Soil moisture: ");
  Serial.print(percentage, 2);  // Print with 2 decimal places
  Serial.println("%");
  delay(1000);
  if (percentage < 30) {
    digitalWrite(relayPin, LOW); // Open the relay
    delay(10000);
    digitalWrite(relayPin, HIGH); // Close the relay
  }



}

void callback(char* topic, byte* message, unsigned int length) {
  // Convert byte array to string
  msgString = String((char*)message, length);
  Serial.print("Message: ");
  Serial.println(msgString);

  if (msgString == "close") {
    digitalWrite(valve_pin, HIGH);   // Close the valve
    Serial.println("Close the valve!");
  } else if (msgString == "open") {
    digitalWrite(valve_pin, LOW);  // Open the valve
    Serial.println("Open the valve!");
  }

}
